diff --git a/src/rdb.c b/src/rdb.c
index 7d11a11..8d1234e 100644
--- a/src/rdb.c
+++ b/src/rdb.c
@@ -323,6 +323,7 @@ int rdbSaveObject(FILE *fp, robj *o) {
                 if ((n = rdbSaveStringObject(fp,eleobj)) == -1) return -1;
                 nwritten += n;
                 if ((n = rdbSaveDoubleValue(fp,*score)) == -1) return -1;
+				// TODO save score2
                 nwritten += n;
             }
             dictReleaseIterator(di);
@@ -792,7 +793,8 @@ robj *rdbLoadObject(int type, FILE *fp) {
                 sdslen(ele->ptr) > maxelelen)
                     maxelelen = sdslen(ele->ptr);
 
-            znode = zslInsert(zs->zsl,score,ele);
+			// TODO load score2
+            znode = zslInsert(zs->zsl,score,0,ele);
             dictAdd(zs->dict,ele,&znode->score);
             incrRefCount(ele); /* added to skiplist */
         }
diff --git a/src/redis.c b/src/redis.c
index d4a9a30..0d1e1b6 100644
--- a/src/redis.c
+++ b/src/redis.c
@@ -134,6 +134,12 @@ struct redisCommand readonlyCommandTable[] = {
     {"zscore",zscoreCommand,3,0,NULL,1,1,1},
     {"zrank",zrankCommand,3,0,NULL,1,1,1},
     {"zrevrank",zrevrankCommand,3,0,NULL,1,1,1},
+
+    {"zzadd",zzaddCommand,-5,REDIS_CMD_DENYOOM,NULL,1,1,1},
+    {"zzscore",zzscoreCommand,3,0,NULL,1,1,1},
+    {"zzrange",zzrangeCommand,-4,0,NULL,1,1,1},
+    {"zzrevrange",zzrevrangeCommand,-4,0,NULL,1,1,1},
+
     {"hset",hsetCommand,4,REDIS_CMD_DENYOOM,NULL,1,1,1},
     {"hsetnx",hsetnxCommand,4,REDIS_CMD_DENYOOM,NULL,1,1,1},
     {"hget",hgetCommand,3,0,NULL,1,1,1},
diff --git a/src/redis.h b/src/redis.h
index aca45ae..d4e4390 100644
--- a/src/redis.h
+++ b/src/redis.h
@@ -587,6 +587,7 @@ typedef struct _redisSortOperation {
 typedef struct zskiplistNode {
     robj *obj;
     double score;
+    long long score2;
     struct zskiplistNode *backward;
     struct zskiplistLevel {
         struct zskiplistNode *forward;
@@ -827,8 +828,8 @@ void backgroundRewriteDoneHandler(int statloc);
 /* Sorted sets data type */
 zskiplist *zslCreate(void);
 void zslFree(zskiplist *zsl);
-zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj);
-unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score);
+zskiplistNode *zslInsert(zskiplist *zsl, double score, long long score2, robj *obj);
+unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score, long long score2);
 double zzlGetScore(unsigned char *sptr);
 void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr);
 void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr);
@@ -1029,6 +1030,12 @@ void zcardCommand(redisClient *c);
 void zremCommand(redisClient *c);
 void zscoreCommand(redisClient *c);
 void zremrangebyscoreCommand(redisClient *c);
+
+void zzaddCommand(redisClient *c);
+void zzrangeCommand(redisClient *c);
+void zzrevrangeCommand(redisClient *c);
+void zzscoreCommand(redisClient *c);
+
 void multiCommand(redisClient *c);
 void execCommand(redisClient *c);
 void discardCommand(redisClient *c);
diff --git a/src/t_zset.c b/src/t_zset.c
index b7b42a2..3a3c419 100644
--- a/src/t_zset.c
+++ b/src/t_zset.c
@@ -23,9 +23,10 @@
  * pointers being only at "level 1". This allows to traverse the list
  * from tail to head, useful for ZREVRANGE. */
 
-zskiplistNode *zslCreateNode(int level, double score, robj *obj) {
+zskiplistNode *zslCreateNode(int level, double score, long long score2, robj *obj) {
     zskiplistNode *zn = zmalloc(sizeof(*zn)+level*sizeof(struct zskiplistLevel));
     zn->score = score;
+    zn->score2 = score2;
     zn->obj = obj;
     return zn;
 }
@@ -37,7 +38,7 @@ zskiplist *zslCreate(void) {
     zsl = zmalloc(sizeof(*zsl));
     zsl->level = 1;
     zsl->length = 0;
-    zsl->header = zslCreateNode(ZSKIPLIST_MAXLEVEL,0,NULL);
+    zsl->header = zslCreateNode(ZSKIPLIST_MAXLEVEL,0,0,NULL);
     for (j = 0; j < ZSKIPLIST_MAXLEVEL; j++) {
         zsl->header->level[j].forward = NULL;
         zsl->header->level[j].span = 0;
@@ -71,7 +72,7 @@ int zslRandomLevel(void) {
     return (level<ZSKIPLIST_MAXLEVEL) ? level : ZSKIPLIST_MAXLEVEL;
 }
 
-zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {
+zskiplistNode *zslInsert(zskiplist *zsl, double score, long long score2, robj *obj) {
     zskiplistNode *update[ZSKIPLIST_MAXLEVEL], *x;
     unsigned int rank[ZSKIPLIST_MAXLEVEL];
     int i, level;
@@ -103,7 +104,7 @@ zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {
         }
         zsl->level = level;
     }
-    x = zslCreateNode(level,score,obj);
+    x = zslCreateNode(level,score, score2, obj);
     for (i = 0; i < level; i++) {
         x->level[i].forward = update[i]->level[i].forward;
         update[i]->level[i].forward = x;
@@ -414,14 +415,25 @@ double zzlGetScore(unsigned char *sptr) {
     long long vlong;
     char buf[128];
     double score;
+    long long score2;
+    unsigned int scorelen;
 
     redisAssert(sptr != NULL);
     redisAssert(ziplistGet(sptr,&vstr,&vlen,&vlong));
 
     if (vstr) {
         memcpy(buf,vstr,vlen);
-        buf[vlen] = '\0';
-        score = strtod(buf,NULL);
+		if (vlen > 1 && buf[0] == '_') {
+			scorelen = buf[1];
+			buf[scorelen + 2] = '\0';
+			buf[vlen] = '\0';
+			score = strtod(buf+2,NULL);
+			score2 = strtoll(buf+3+scorelen,NULL,10);
+			/*redisLog(REDIS_VERBOSE, "score2: %f\n", score2); */
+		} else {
+			buf[vlen] = '\0';
+			score = strtod(buf,NULL);
+		}
     } else {
         score = vlong;
     }
@@ -638,9 +650,39 @@ unsigned char *zzlInsertAt(unsigned char *zl, unsigned char *eptr, robj *ele, do
     return zl;
 }
 
+unsigned char *zzlInsertAt2(unsigned char *zl, unsigned char *eptr, robj *ele, double score, long long score2) {
+    unsigned char *sptr;
+    char scorebuf[128];
+    int scorelen;
+    size_t offset;
+
+    redisAssert(ele->encoding == REDIS_ENCODING_RAW);
+	scorebuf[0] = '_';
+    scorelen = d2string(scorebuf+2,sizeof(scorebuf),score);
+	scorebuf[1] = scorelen;
+	scorelen += 2;
+	scorebuf[scorelen++] = '_';
+    scorelen += ll2string(scorebuf+scorelen,sizeof(scorebuf),score2);
+    if (eptr == NULL) {
+        zl = ziplistPush(zl,ele->ptr,sdslen(ele->ptr),ZIPLIST_TAIL);
+        zl = ziplistPush(zl,(unsigned char*)scorebuf,scorelen,ZIPLIST_TAIL);
+    } else {
+        /* Keep offset relative to zl, as it might be re-allocated. */
+        offset = eptr-zl;
+        zl = ziplistInsert(zl,eptr,ele->ptr,sdslen(ele->ptr));
+        eptr = zl+offset;
+
+        /* Insert score after the element. */
+        redisAssert((sptr = ziplistNext(zl,eptr)) != NULL);
+        zl = ziplistInsert(zl,sptr,(unsigned char*)scorebuf,scorelen);
+    }
+
+    return zl;
+}
+
 /* Insert (element,score) pair in ziplist. This function assumes the element is
  * not yet present in the list. */
-unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score) {
+unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score, long long score2) {
     unsigned char *eptr = ziplistIndex(zl,0), *sptr;
     double s;
 
@@ -654,12 +696,12 @@ unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score) {
             /* First element with score larger than score for element to be
              * inserted. This means we should take its spot in the list to
              * maintain ordering. */
-            zl = zzlInsertAt(zl,eptr,ele,score);
+            zl = zzlInsertAt2(zl,eptr,ele,score, score2);
             break;
         } else if (s == score) {
             /* Ensure lexicographical ordering for elements. */
             if (zzlCompareElements(eptr,ele->ptr,sdslen(ele->ptr)) > 0) {
-                zl = zzlInsertAt(zl,eptr,ele,score);
+                zl = zzlInsertAt2(zl,eptr,ele,score, score2);
                 break;
             }
         }
@@ -670,7 +712,7 @@ unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score) {
 
     /* Push on tail of list when it was not yet inserted. */
     if (eptr == NULL)
-        zl = zzlInsertAt(zl,NULL,ele,score);
+        zl = zzlInsertAt2(zl,NULL,ele,score, score2);
 
     decrRefCount(ele);
     return zl;
@@ -735,6 +777,7 @@ void zsetConvert(robj *zobj, int encoding) {
     zskiplistNode *node, *next;
     robj *ele;
     double score;
+	long long score2 = 0;
 
     if (zobj->encoding == encoding) return;
     if (zobj->encoding == REDIS_ENCODING_ZIPLIST) {
@@ -765,7 +808,10 @@ void zsetConvert(robj *zobj, int encoding) {
                 ele = createStringObject((char*)vstr,vlen);
 
             /* Has incremented refcount since it was just created. */
-            node = zslInsert(zs->zsl,score,ele);
+			// /*TODO get score2*/
+			// we force skiplist for score2 currently
+			// so we should never be here
+            node = zslInsert(zs->zsl,score,score2,ele);
             redisAssert(dictAdd(zs->dict,ele,&node->score) == DICT_OK);
             incrRefCount(ele); /* Added to dictionary. */
             zzlNext(zl,&eptr,&sptr);
@@ -811,17 +857,20 @@ void zsetConvert(robj *zobj, int encoding) {
  *----------------------------------------------------------------------------*/
 
 /* This generic command implements both ZADD and ZINCRBY. */
-void zaddGenericCommand(redisClient *c, int incr) {
+void zaddGenericCommand(redisClient *c, int incr, int is_zz) {
     static char *nanerr = "resulting score is not a number (NaN)";
     robj *key = c->argv[1];
     robj *ele;
     robj *zobj;
     robj *curobj;
     double score = 0, *scores, curscore = 0.0;
-    int j, elements = (c->argc-2)/2;
+	long long score2 = 0, *scores2, curscore2 = 0;
+	int element_param_cnt = (is_zz ? 3 : 2);
+	int ele_offset = (is_zz ? 4 : 3);
+    int j, elements = (c->argc-2) / element_param_cnt;
     int added = 0;
 
-    if (c->argc % 2) {
+    if ((c->argc-2) % element_param_cnt) {
         addReply(c,shared.syntaxerr);
         return;
     }
@@ -830,11 +879,15 @@ void zaddGenericCommand(redisClient *c, int incr) {
      * before executing additions to the sorted set, as the command should
      * either execute fully or nothing at all. */
     scores = zmalloc(sizeof(double)*elements);
+	if (is_zz)
+		scores2 = zmalloc(sizeof(long long)*elements);
     for (j = 0; j < elements; j++) {
-        if (getDoubleFromObjectOrReply(c,c->argv[2+j*2],&scores[j],NULL)
-            != REDIS_OK)
+        if (getDoubleFromObjectOrReply(c,c->argv[2+j*element_param_cnt],&scores[j],NULL) != REDIS_OK
+			 || (is_zz && getLongLongFromObjectOrReply(c,c->argv[3+j*element_param_cnt],&scores2[j],NULL) != REDIS_OK))
         {
             zfree(scores);
+			if (is_zz)
+				zfree(scores2);
             return;
         }
     }
@@ -842,30 +895,41 @@ void zaddGenericCommand(redisClient *c, int incr) {
     /* Lookup the key and create the sorted set if does not exist. */
     zobj = lookupKeyWrite(c->db,key);
     if (zobj == NULL) {
-        if (server.zset_max_ziplist_entries == 0 ||
-            server.zset_max_ziplist_value < sdslen(c->argv[3]->ptr))
-        {
-            zobj = createZsetObject();
-        } else {
-            zobj = createZsetZiplistObject();
-        }
+		if (is_zz) {
+			// force use of skiplist
+			zobj = createZsetObject();
+		} else {
+			if (server.zset_max_ziplist_entries == 0 ||
+				server.zset_max_ziplist_value < sdslen(c->argv[ele_offset]->ptr))
+			{
+				zobj = createZsetObject();
+			} else {
+				zobj = createZsetZiplistObject();
+			}
+		}
         dbAdd(c->db,key,zobj);
     } else {
         if (zobj->type != REDIS_ZSET) {
             addReply(c,shared.wrongtypeerr);
             zfree(scores);
+			if (is_zz)
+				zfree(scores2);
             return;
         }
     }
 
     for (j = 0; j < elements; j++) {
         score = scores[j];
+		if (is_zz)
+			score2 = scores2[j];
+		else
+			score2 = 0;
 
         if (zobj->encoding == REDIS_ENCODING_ZIPLIST) {
             unsigned char *eptr;
 
             /* Prefer non-encoded element when dealing with ziplists. */
-            ele = c->argv[3+j*2];
+            ele = c->argv[ele_offset+j*2];
             if ((eptr = zzlFind(zobj->ptr,ele,&curscore)) != NULL) {
                 if (incr) {
                     score += curscore;
@@ -874,6 +938,8 @@ void zaddGenericCommand(redisClient *c, int incr) {
                         /* Don't need to check if the sorted set is empty
                          * because we know it has at least one element. */
                         zfree(scores);
+						if (is_zz)
+							zfree(scores2);
                         return;
                     }
                 }
@@ -881,7 +947,7 @@ void zaddGenericCommand(redisClient *c, int incr) {
                 /* Remove and re-insert when score changed. */
                 if (score != curscore) {
                     zobj->ptr = zzlDelete(zobj->ptr,eptr);
-                    zobj->ptr = zzlInsert(zobj->ptr,ele,score);
+                    zobj->ptr = zzlInsert(zobj->ptr,ele,score,score2);
 
                     signalModifiedKey(c->db,key);
                     server.dirty++;
@@ -889,7 +955,7 @@ void zaddGenericCommand(redisClient *c, int incr) {
             } else {
                 /* Optimize: check if the element is too large or the list
                  * becomes too long *before* executing zzlInsert. */
-                zobj->ptr = zzlInsert(zobj->ptr,ele,score);
+                zobj->ptr = zzlInsert(zobj->ptr,ele,score,score2);
                 if (zzlLength(zobj->ptr) > server.zset_max_ziplist_entries)
                     zsetConvert(zobj,REDIS_ENCODING_SKIPLIST);
                 if (sdslen(ele->ptr) > server.zset_max_ziplist_value)
@@ -904,11 +970,16 @@ void zaddGenericCommand(redisClient *c, int incr) {
             zskiplistNode *znode;
             dictEntry *de;
 
-            ele = c->argv[3+j*2] = tryObjectEncoding(c->argv[3+j*2]);
+            ele = c->argv[ele_offset+j*2] = tryObjectEncoding(c->argv[ele_offset+j*2]);
             de = dictFind(zs->dict,ele);
             if (de != NULL) {
                 curobj = dictGetEntryKey(de);
                 curscore = *(double*)dictGetEntryVal(de);
+				if (score2 == 0) {
+					curscore2 = *((long long*)(((double*)dictGetEntryVal(de))+1));
+					score2 = curscore2;
+				}
+
 
                 if (incr) {
                     score += curscore;
@@ -917,6 +988,8 @@ void zaddGenericCommand(redisClient *c, int incr) {
                         /* Don't need to check if the sorted set is empty
                          * because we know it has at least one element. */
                         zfree(scores);
+						if (is_zz)
+							zfree(scores2);
                         return;
                     }
                 }
@@ -926,7 +999,7 @@ void zaddGenericCommand(redisClient *c, int incr) {
                  * dictionary still has a reference to it. */
                 if (score != curscore) {
                     redisAssert(zslDelete(zs->zsl,curscore,curobj));
-                    znode = zslInsert(zs->zsl,score,curobj);
+                    znode = zslInsert(zs->zsl,score,score2,curobj);
                     incrRefCount(curobj); /* Re-inserted in skiplist. */
                     dictGetEntryVal(de) = &znode->score; /* Update score ptr. */
 
@@ -934,7 +1007,7 @@ void zaddGenericCommand(redisClient *c, int incr) {
                     server.dirty++;
                 }
             } else {
-                znode = zslInsert(zs->zsl,score,ele);
+                znode = zslInsert(zs->zsl,score,score2,ele);
                 incrRefCount(ele); /* Inserted in skiplist. */
                 redisAssert(dictAdd(zs->dict,ele,&znode->score) == DICT_OK);
                 incrRefCount(ele); /* Added to dictionary. */
@@ -948,6 +1021,8 @@ void zaddGenericCommand(redisClient *c, int incr) {
         }
     }
     zfree(scores);
+	if (is_zz)
+		zfree(scores2);
     if (incr) /* ZINCRBY */
         addReplyDouble(c,score);
     else /* ZADD */
@@ -955,11 +1030,15 @@ void zaddGenericCommand(redisClient *c, int incr) {
 }
 
 void zaddCommand(redisClient *c) {
-    zaddGenericCommand(c,0);
+    zaddGenericCommand(c,0,0);
 }
 
 void zincrbyCommand(redisClient *c) {
-    zaddGenericCommand(c,1);
+    zaddGenericCommand(c,1,0);
+}
+
+void zzaddCommand(redisClient *c) {
+    zaddGenericCommand(c,0,1);
 }
 
 void zremCommand(redisClient *c) {
@@ -1546,6 +1625,7 @@ void zunionInterGenericCommand(redisClient *c, robj *dstkey, int op) {
              * by size, all src[i > 0] are non-empty too. */
             while (zuiNext(&src[0],&zval)) {
                 double score, value;
+				long long score2;
 
                 score = src[0].weight * zval.score;
                 if (isnan(score)) score = 0;
@@ -1567,7 +1647,8 @@ void zunionInterGenericCommand(redisClient *c, robj *dstkey, int op) {
                 /* Only continue when present in every input. */
                 if (j == setnum) {
                     tmp = zuiObjectFromValue(&zval);
-                    znode = zslInsert(dstzset->zsl,score,tmp);
+					// TODO score2 process
+                    znode = zslInsert(dstzset->zsl,score,0,tmp);
                     incrRefCount(tmp); /* added to skiplist */
                     dictAdd(dstzset->dict,tmp,&znode->score);
                     incrRefCount(tmp); /* added to dictionary */
@@ -1609,7 +1690,8 @@ void zunionInterGenericCommand(redisClient *c, robj *dstkey, int op) {
                 }
 
                 tmp = zuiObjectFromValue(&zval);
-                znode = zslInsert(dstzset->zsl,score,tmp);
+				// TODO score2 process
+                znode = zslInsert(dstzset->zsl,score,0,tmp);
                 incrRefCount(zval.ele); /* added to skiplist */
                 dictAdd(dstzset->dict,tmp,&znode->score);
                 incrRefCount(zval.ele); /* added to dictionary */
@@ -1766,6 +1848,121 @@ void zrevrangeCommand(redisClient *c) {
     zrangeGenericCommand(c,1);
 }
 
+void zzrangeGenericCommand(redisClient *c, int reverse) {
+    robj *key = c->argv[1];
+    robj *zobj;
+    int withscores = 0;
+    long start;
+    long end;
+    int llen;
+    int rangelen;
+
+    if ((getLongFromObjectOrReply(c, c->argv[2], &start, NULL) != REDIS_OK) ||
+        (getLongFromObjectOrReply(c, c->argv[3], &end, NULL) != REDIS_OK)) return;
+
+    if (c->argc == 5 && !strcasecmp(c->argv[4]->ptr,"withscores")) {
+        withscores = 1;
+    } else if (c->argc >= 5) {
+        addReply(c,shared.syntaxerr);
+        return;
+    }
+
+    if ((zobj = lookupKeyReadOrReply(c,key,shared.emptymultibulk)) == NULL
+         || checkType(c,zobj,REDIS_ZSET)) return;
+
+    /* Sanitize indexes. */
+    llen = zsetLength(zobj);
+    if (start < 0) start = llen+start;
+    if (end < 0) end = llen+end;
+    if (start < 0) start = 0;
+
+    /* Invariant: start >= 0, so this test will be true when end < 0.
+     * The range is empty when start > end or start >= length. */
+    if (start > end || start >= llen) {
+        addReply(c,shared.emptymultibulk);
+        return;
+    }
+    if (end >= llen) end = llen-1;
+    rangelen = (end-start)+1;
+
+    /* Return the result in form of a multi-bulk reply */
+    addReplyMultiBulkLen(c, withscores ? (rangelen*3) : rangelen);
+
+    if (zobj->encoding == REDIS_ENCODING_ZIPLIST) {
+        unsigned char *zl = zobj->ptr;
+        unsigned char *eptr, *sptr;
+        unsigned char *vstr;
+        unsigned int vlen;
+        long long vlong;
+
+        if (reverse)
+            eptr = ziplistIndex(zl,-2-(2*start));
+        else
+            eptr = ziplistIndex(zl,2*start);
+
+        redisAssert(eptr != NULL);
+        sptr = ziplistNext(zl,eptr);
+
+        while (rangelen--) {
+            redisAssert(eptr != NULL && sptr != NULL);
+            redisAssert(ziplistGet(eptr,&vstr,&vlen,&vlong));
+            if (vstr == NULL)
+                addReplyBulkLongLong(c,vlong);
+            else
+                addReplyBulkCBuffer(c,vstr,vlen);
+
+            if (withscores) {
+                addReplyDouble(c,zzlGetScore(sptr));
+				// TODO get score2
+				addReplyBulkLongLong(c, 0);
+			}
+
+            if (reverse)
+                zzlPrev(zl,&eptr,&sptr);
+            else
+                zzlNext(zl,&eptr,&sptr);
+        }
+
+    } else if (zobj->encoding == REDIS_ENCODING_SKIPLIST) {
+        zset *zs = zobj->ptr;
+        zskiplist *zsl = zs->zsl;
+        zskiplistNode *ln;
+        robj *ele;
+
+        /* Check if starting point is trivial, before doing log(N) lookup. */
+        if (reverse) {
+            ln = zsl->tail;
+            if (start > 0)
+                ln = zslGetElementByRank(zsl,llen-start);
+        } else {
+            ln = zsl->header->level[0].forward;
+            if (start > 0)
+                ln = zslGetElementByRank(zsl,start+1);
+        }
+
+        while(rangelen--) {
+            redisAssert(ln != NULL);
+            ele = ln->obj;
+            addReplyBulk(c,ele);
+            if (withscores) {
+                addReplyDouble(c,ln->score);
+				addReplyBulkLongLong(c, ln->score2);
+			}
+            ln = reverse ? ln->backward : ln->level[0].forward;
+        }
+    } else {
+        redisPanic("Unknown sorted set encoding");
+    }
+}
+
+void zzrangeCommand(redisClient *c) {
+    zzrangeGenericCommand(c,0);
+}
+
+void zzrevrangeCommand(redisClient *c) {
+    zzrangeGenericCommand(c,1);
+}
+
 /* This command implements ZRANGEBYSCORE, ZREVRANGEBYSCORE and ZCOUNT.
  * If "justcount", only the number of elements in the range is returned. */
 void genericZrangebyscoreCommand(redisClient *c, int reverse, int justcount) {
@@ -1996,6 +2193,39 @@ void zscoreCommand(redisClient *c) {
     }
 }
 
+void zzscoreCommand(redisClient *c) {
+    robj *key = c->argv[1];
+    robj *zobj;
+    double score;
+
+    if ((zobj = lookupKeyReadOrReply(c,key,shared.nullbulk)) == NULL ||
+        checkType(c,zobj,REDIS_ZSET)) return;
+
+    if (zobj->encoding == REDIS_ENCODING_ZIPLIST) {
+        if (zzlFind(zobj->ptr,c->argv[2],&score) != NULL)
+            addReplyDouble(c,score);
+        else
+            addReply(c,shared.nullbulk);
+    } else if (zobj->encoding == REDIS_ENCODING_SKIPLIST) {
+        zset *zs = zobj->ptr;
+        dictEntry *de;
+
+        c->argv[2] = tryObjectEncoding(c->argv[2]);
+        de = dictFind(zs->dict,c->argv[2]);
+        if (de != NULL) {
+			addReplyMultiBulkLen(c, 2);
+            score = *(double*)dictGetEntryVal(de);
+            addReplyDouble(c,score);
+			long long score2 = *((long long*)(((double*)dictGetEntryVal(de))+1));
+            addReplyBulkLongLong(c,score2);
+        } else {
+            addReply(c,shared.nullbulk);
+        }
+    } else {
+        redisPanic("Unknown sorted set encoding");
+    }
+}
+
 void zrankGenericCommand(redisClient *c, int reverse) {
     robj *key = c->argv[1];
     robj *ele = c->argv[2];
